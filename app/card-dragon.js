// Generated by CoffeeScript 1.8.0
(function() {
  // Compiled from src/dragon.coffee
  var Dragon, SleepingKingStudios;

  SleepingKingStudios = require('./sleeping_king_studios').SleepingKingStudios;

  Dragon = {
    greet: SleepingKingStudios.Greeter.greet,
    roar: function() {
      return 'Roar!';
    }
  };

  // Compiled from src/dragon/card.coffee
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Dragon.Card = (function() {
    function Card() {
      this.displayName = __bind(this.displayName, this);
    }

    Card.prototype.displayName = function() {
      return 'Card';
    };

    return Card;

  })();

  // Compiled from src/dragon-elements/elements.coffee
  Dragon.Elements = {};

  // Compiled from src/dragon-elements/card.coffee
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Dragon.Elements.Card = (function(_super) {
    var _element;

    __extends(Card, _super);

    function Card(element) {
      this.displayName = __bind(this.displayName, this);
      this.getElement = __bind(this.getElement, this);
      Card.__super__.constructor.call(this);
      this._element = element;
    }


    /* Element */

    Card.prototype.getElement = function() {
      return this._element;
    };

    _element = null;


    /* Name */

    Card.prototype.displayName = function() {
      return this.getElement();
    };

    return Card;

  })(Dragon.Card);

  // Compiled from src/dragon-elements/client.coffee
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Dragon.Elements.Client = (function() {
    function Client(player) {
      this.runCommand = __bind(this.runCommand, this);
      this.getPlayer = __bind(this.getPlayer, this);
      this._player = player;
    }


    /* Player */

    Client.prototype._player = null;

    Client.prototype.getPlayer = function() {
      return this._player;
    };


    /* Commands */

    Client.prototype.runCommand = function(command) {
      var match, player;
      player = this.getPlayer();
      if (command === 'look') {
        return player.inspectHand();
      }
      if (match = command.match(/^play\s+([A-Za-z ]+)/)) {
        return player.playCard(match[1]);
      }
    };

    return Client;

  })();

  // Compiled from src/dragon/game.coffee
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Dragon.Game = (function() {
    function Game() {
      this.getPlayers = __bind(this.getPlayers, this);
      this.addPlayer = __bind(this.addPlayer, this);
      this.start = __bind(this.start, this);
      this.setup = __bind(this.setup, this);
    }

    Game.prototype._setup = false;

    Game.prototype.setup = function() {
      var player, _i, _len, _ref, _setup;
      if (_setup) {
        return;
      }
      _ref = this.getPlayers();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        player.drawCards(5);
      }
      return _setup = true;
    };

    Game.prototype.start = function() {
      return this.setup();
    };


    /* Players */

    Game.prototype.addPlayer = function(player) {
      this._players.push(player);
      return player.game = this;
    };

    Game.prototype.getPlayers = function() {
      return this._players;
    };

    Game.prototype._players = [];

    return Game;

  })();

  // Compiled from src/dragon-elements/game.coffee
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Dragon.Elements.Game = (function(_super) {
    __extends(Game, _super);

    function Game() {
      this.playCard = __bind(this.playCard, this);
      this.endTurn = __bind(this.endTurn, this);
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.endTurn = function() {
      return null;
    };

    Game.prototype.playCard = function(player, card) {
      var playerIndex;
      playerIndex = this.getPlayers.indexOf(player);
      console.log('Elements.Game#playCard(), playerIndex = ' + playerIndex);
      return console.log(card);
    };

    return Game;

  })(Dragon.Game);

  // Compiled from src/dragon/card_list.coffee
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Dragon.CardList = (function() {
    function CardList() {
      this.removeCard = __bind(this.removeCard, this);
      this.length = __bind(this.length, this);
      this.getCards = __bind(this.getCards, this);
      this.addCard = __bind(this.addCard, this);
      this._cards = [];
    }


    /* Cards */

    CardList.prototype._cards = null;

    CardList.prototype.addCard = function(card) {
      return this._cards.push(card);
    };

    CardList.prototype.getCards = function() {
      return this._cards;
    };

    CardList.prototype.length = function() {
      return this._cards.length;
    };

    CardList.prototype.removeCard = function(card) {
      var index;
      index = this._cards.indexOf(card);
      return this._cards.splice(index, 1);
    };

    return CardList;

  })();

  // Compiled from src/dragon/player.coffee
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Dragon.Player = (function() {
    function Player() {
      this.getCards = __bind(this.getCards, this);
      this.setGame = __bind(this.setGame, this);
      this.getGame = __bind(this.getGame, this);
      this._hand = new Dragon.CardList();
    }


    /* Game */

    Player.prototype._game = null;

    Player.prototype.getGame = function() {
      return this._game;
    };

    Player.prototype.setGame = function(game) {
      return this._game = game;
    };


    /* Hand */

    Player.prototype._hand = null;

    Player.prototype.getCards = function() {
      return this._hand.getCards();
    };

    return Player;

  })();

  // Compiled from src/dragon-elements/player.coffee
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Dragon.Elements.Player = (function(_super) {
    __extends(Player, _super);

    function Player() {
      this._findCardByName = __bind(this._findCardByName, this);
      this.playCard = __bind(this.playCard, this);
      this.inspectHand = __bind(this.inspectHand, this);
      this.drawCards = __bind(this.drawCards, this);
      this.drawCard = __bind(this.drawCard, this);
      this.discardCard = __bind(this.discardCard, this);
      this.setDeck = __bind(this.setDeck, this);
      this.getDeck = __bind(this.getDeck, this);
      this.setup = __bind(this.setup, this);
      return Player.__super__.constructor.apply(this, arguments);
    }

    Player.prototype.setup = function() {
      return this.drawCards(5);
    };


    /* Deck */

    Player.prototype._deck = null;

    Player.prototype.getDeck = function() {
      return this._deck;
    };

    Player.prototype.setDeck = function(deck) {
      return this._deck = deck;
    };


    /* Hand */

    Player.prototype.discardCard = function(card) {
      return null;
    };

    Player.prototype.drawCard = function() {
      return this._hand.getCards().push(this._deck.drawCard());
    };

    Player.prototype.drawCards = function(count) {
      var _results;
      if (count === 0) {
        return;
      }
      _results = [];
      while (this.drawCard() && --count) {
        _results.push(null);
      }
      return _results;
    };

    Player.prototype.inspectHand = function() {
      var card, cards, str, _i, _len, _ref;
      cards = this.getCards();
      if (cards.length === 0) {
        return 'You have no cards in your hand.';
      }
      str = '';
      _ref = this.getCards();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        card = _ref[_i];
        str += card.displayName();
        str += "\n";
      }
      return str.trim();
    };

    Player.prototype.playCard = function(name) {
      var cards, matchingCards;
      cards = this.getCards();
      if (cards.length === 0) {
        return 'You have no cards in your hand.';
      }
      matchingCards = this._findCardByName(name);
      if (matchingCards === null || matchingCards.length === 0) {
        return "You have no cards named " + name + ".";
      }
      this._hand.removeCard(matchingCards[0]);
      return "You played " + name + "!";
    };

    Player.prototype._findCardByName = function(name) {
      var card, cards, match, _i, _len;
      match = [];
      cards = this.getCards();
      for (_i = 0, _len = cards.length; _i < _len; _i++) {
        card = cards[_i];
        if (card.displayName() === name) {
          match.push(card);
        }
      }
      return match;
    };

    return Player;

  })(Dragon.Player);

  // Compiled from src/dragon/deck.coffee
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Dragon.Deck = (function(_super) {
    __extends(Deck, _super);

    function Deck() {
      this.shuffle = __bind(this.shuffle, this);
      this.drawCard = __bind(this.drawCard, this);
      return Deck.__super__.constructor.apply(this, arguments);
    }


    /* Cards */

    Deck.prototype.drawCard = function() {
      return this._cards.pop();
    };

    Deck.prototype.shuffle = function() {
      var i, j, u, v, _results;
      i = this._cards.length;
      if (i === 0) {
        return;
      }
      _results = [];
      while (--i) {
        j = Math.floor(Math.random() * (i + 1));
        u = this._cards[i];
        v = this._cards[j];
        this._cards[i] = v;
        _results.push(this._cards[j] = u);
      }
      return _results;
    };

    return Deck;

  })(Dragon.CardList);

  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = Dragon;
    }
    exports.CardDragon = Dragon;
  } else {
    this.CardDragon = Dragon;
  }
}).call(this);
